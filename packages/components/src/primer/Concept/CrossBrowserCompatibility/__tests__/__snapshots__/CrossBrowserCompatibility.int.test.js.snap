// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CrossBrowserCompatibility /> Render must match renderDesignSystemCore() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Papillon Ads Implementation
  </h2>
  <h3>
    📖. Design System Core
  </h3>
</div>
`;

exports[`<CrossBrowserCompatibility /> Render must match renderOpenSourceDependencyProjects() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Open Source Dependency Projects
  </h2>
</div>
`;

exports[`<CrossBrowserCompatibility /> Render must match renderProductMicrosites() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Papillon Ads Implementation
  </h2>
  <h3>
    📖. Product Microsites
  </h3>
</div>
`;

exports[`<CrossBrowserCompatibility /> Render must match renderSpecificationsStandardsGuidelines() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Specifications/Standards/Guidelines
  </h2>
  <h3>
    📖. ES6 / ES2015
  </h3>
  <h4>
    📃. From var to const/let
  </h4>
  <h5>
    📄. Reference
  </h5>
  <h6>
    📝. MDN
  </h6>
  <div>
    ﹘ 
    <a
      href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"
    >
      const
    </a>
     Constants are block-scoped, much like variables defined using the let keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.
  </div>
  <div>
    ﹘ 
    <a
      href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"
    >
      let
    </a>
     The let statement declares a block scope local variable, optionally initializing it to a value.
  </div>
  <h5>
    📄. Compatibility
  </h5>
  <h6>
    📝. Browser Support
  </h6>
  <div>
    ﹘ const &gt; Chrome ✓, Firefox ✓, Safari ✓, Edge ✓, Internet Explorer ✓
  </div>
  <div>
    ﹘ let &gt; Chrome ✓, Firefox ✓, Safari ✓, Edge ✓, Internet Explorer 🌦
  </div>
  <h6>
    📝. 🔖 Transpiled / Polyfilled
  </h6>
  <div>
    ﹘ Transpiled ✓, Safe to use ✅
  </div>
</div>
`;
