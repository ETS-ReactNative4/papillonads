// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CodeStyle /> Render must match designSystemCore() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Papillon Ads Implementation
  </h2>
  <h3>
    📖. Design System Core
  </h3>
  <h4>
    📃. Setup file(s)
  </h4>
  Coming soon...
  <h4>
    📃. Knowledge base
  </h4>
  Coming soon...
</div>
`;

exports[`<CodeStyle /> Render must match openSourceDependencyProjects() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Open Source Dependency Projects
  </h2>
  <h3>
    📖. Code Linting
  </h3>
  <h4>
    📃. JavaScript
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/eslint/eslint"
    >
      ESLint
    </a>
  </h5>
  <div>
    ﹘ESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions:
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/SublimeLinter/SublimeLinter-eslint"
    >
      SublimeLinter ESLint
    </a>
  </h5>
  <div>
    ﹘This linter plugin for SublimeLinter provides an interface to ESLint
  </div>
  <div>
    ﹘This linter plugin for SublimeLinter provides an interface to ESLint. It will be used with &auot;JavaScript&auot; files, but since eslint is pluggable, it can actually lint a variety of other files as well.
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/microsoft/vscode-eslint"
    >
      VSCode ESLint
    </a>
  </h5>
  <div>
    ﹘VSCode extension to integrate eslint into VSCode
  </div>
  <div>
    ﹘Integrates ESLint into VS Code. If you are new to ESLint check the 
    <a
      href="https://eslint.org/"
    >
      documentation
    </a>
    .
  </div>
  <div>
    ﹘The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn't provide one the extension looks for a global install version. If you haven't installed ESLint either locally or globally do so by running npm install eslint in the workspace folder for a local install or npm install -g eslint for a global install.
  </div>
  <div>
    ﹘On new folders you might also need to create a .eslintrc configuration file. You can do this by either using the VS Code command Create ESLint configuration or by running the eslint command in a terminal. If you have installed ESLint globally (see above) then run eslint --init in a terminal. If you have installed ESLint locally then run .\\node_modules\\.bin\\eslint --init under Windows and ./node_modules/.bin/eslint --init under Linux and Mac.
  </div>
  <h5>
    📄. 
    <a
      href="http://plugins.jetbrains.com/plugin/7494-eslint"
    >
      JetBrains ESlint
    </a>
  </h5>
  <div>
    ﹘ESLint intellij integration.
  </div>
  <div>
    ﹘Support displaying eslint warnings as intellij inspections
  </div>
  <div>
    ﹘Quick fixes for several rules
  </div>
  <div>
    ﹘Support for custom eslint rules
  </div>
  <div>
    ﹘Support for eslint config annotation and completion
  </div>
  <h4>
    📃. Sass
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/stylelint/stylelint"
    >
      Stylelint
    </a>
  </h5>
  <div>
    ﹘A mighty, modern linter that helps you avoid errors and enforce conventions in your styles.
  </div>
  <div>
    ﹘It's mighty as it:
  </div>
  <div>
    ﹘understands the latest CSS syntax including custom properties and level 4 selectors
  </div>
  <div>
    ﹘extracts embedded styles from HTML, markdown and CSS-in-JS object & template literals
  </div>
  <div>
    ﹘parses CSS-like syntaxes like SCSS, Sass, Less and SugarSS
  </div>
  <div>
    ﹘has over 170 built-in rules to catch errors, apply limits and enforce stylistic conventions
  </div>
  <div>
    ﹘supports plugins so you can create your own rules or make use of plugins written by the community
  </div>
  <div>
    ﹘automatically fixes the majority of stylistic violations (experimental feature)
  </div>
  <div>
    ﹘is well tested with over 15000 unit tests
  </div>
  <div>
    ﹘supports shareable configs that you can extend or create
  </div>
  <div>
    ﹘is unopinionated so that you can customize it to your exact needs
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/SublimeLinter/SublimeLinter-stylelint"
    >
      SublimeLinter Stylelint
    </a>
  </h5>
  <div>
    ﹘This linter plugin for SublimeLinter provides an interface to stylelint.
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/stylelint/vscode-stylelint"
    >
      VSCode Stylelint
    </a>
  </h5>
  <div>
    ﹘Official Visual Studio Code extension to lint CSS/SCSS/Less with stylelint
  </div>
  <div>
    ﹘The extension uses the stylelint library installed in the opened workspace folder. If the workspace folder does not provide the stylelint, the extension looks for a global installed stylelint. If not in the global installed stylelint, the extension uses the stylelint embedded in the extension. (However, using stylelint embedded in the extension is not recommended.)
  </div>
  <h5>
    📄. 
    <a
      href="https://www.jetbrains.com/help/idea/using-stylelint-code-quality-tool.html"
    >
      JetBrains Stylelint
    </a>
  </h5>
  <div>
    ﹘IntelliJ IDEA integrates with Stylelint so you can inspect your CSS code from inside the IDE. Stylelint wakes up automatically when you edit a CSS file and highlights the detected problems. To view the description of a problem in an information popup, hover the mouse pointer over a stripe in the Validation sidebar. To examine errors and apply suggested quick fixes, press ⌥⏎.
  </div>
  <h3>
    📖. Code Formatting
  </h3>
  <h4>
    📃. HTML, JavaScript and Sass
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/prettier/prettier"
    >
      Prettier
    </a>
  </h5>
  <div>
    ﹘Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.
  </div>
  <div>
    ﹘Prettier can be run in your editor on-save, in a pre-commit hook, or in CI environments to ensure your codebase has a consistent style
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/jonlabelle/SublimeJsPrettier"
    >
      Sublime JsPrettier
    </a>
  </h5>
  <div>
    ﹘JsPrettier is a Sublime Text Plug-in for Prettier, the opinionated code formatter.
  </div>
  <div>
    ﹘JsPrettier is compatible with both Sublime Text 2 and 3, and all supported Operating Systems.
  </div>
  <div>
    ﹘The easiest and recommended way to install JsPrettier is using
     
    <a
      href="https://packagecontrol.io/packages/JsPrettier"
    >
      Package Control
    </a>
    .
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/prettier/prettier-vscode"
    >
      Prettier VSCode
    </a>
  </h5>
  <div>
    ﹘Visual Studio Code extension for Prettier
  </div>
  <div>
    ﹘Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.
  </div>
  <div>
    ﹘Install through VS Code extensions. Search for Prettier - Code formatter
  </div>
  <h5>
    📄. 
    <a
      href="https://plugins.jetbrains.com/plugin/10456-prettier"
    >
      JetBrains Prettier
    </a>
  </h5>
  <div>
    ﹘This plugin adds support for Prettier (https://prettier.io), an opinionated code formatter. To use it:
  </div>
  <div>
    ﹘Add prettier to your project with npm install prettier --save-dev or install it globally
  </div>
  <div>
    ﹘Select the code or file you want to format using Prettier
  </div>
  <div>
    ﹘Use the “Reformat with Prettier” action (Alt-Shift-Cmd-P on macOS or Alt-Shift-Ctrl-P on Windows and Linux) or find it using the “Find Action” popup (Cmd/Ctrl-Shift-A)
  </div>
  <h3>
    📖. File Formatting
  </h3>
  <h4>
    📃. Any file type
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/editorconfig"
    >
      Editorconfig
    </a>
  </h5>
  <div>
    ﹘EditorConfig helps maintain consistent coding styles for multiple developers working on the same project across various editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/editorconfig/editorconfig-sublime"
    >
      Editorconfig Sublime
    </a>
  </h5>
  <div>
    ﹘Sublime Text plugin for EditorConfig - helps developers define and maintain consistent coding styles between different editors and IDEs
  </div>
  <div>
    ﹘Install with 
    <a
      href="https://packagecontrol.io/packages/JsPrettier"
    >
      Package Control
    </a>
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/editorconfig/editorconfig-vscode"
    >
      Editorconfig VSCode
    </a>
  </h5>
  <div>
    ﹘EditorConfig extension for Visual Studio Code
  </div>
  <div>
    ﹘This plugin attempts to override user/workspace settings with settings found in .editorconfig files. No additional or vscode-specific files are required. As with any EditorConfig plugin, if root=true is not specified, EditorConfig will continue to look for an .editorconfig file outside of the project.
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/JetBrains/intellij-community/tree/master/plugins/editorconfig"
    >
      JetBrains Editorconfig
    </a>
  </h5>
  <div>
    ﹘A JetBrains IDE plugin supporting the EditorConfig standard
  </div>
</div>
`;

exports[`<CodeStyle /> Render must match productMicrosites() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Papillon Ads Implementation
  </h2>
  <h3>
    📖. Product Microsites
  </h3>
  <h4>
    📃. Code Linting
  </h4>
  <h5>
    📄. JavaScript
  </h5>
  <h6>
    📝. Setup file(s)
  </h6>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.eslintrc"
    >
      .eslintrc
    </a>
  </div>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.eslintignore"
    >
      .eslintignore
    </a>
  </div>
  <h6>
    📝. Script(s)
  </h6>
  <div>
    ﹘"lint:format": "npm-run-all lint format"
  </div>
  <div>
    ﹘"lint": "npm-run-all lint:js:jsx lint:scss"
  </div>
  <div>
    ﹘"lint:js:jsx": "eslint --ext .js --ext .jsx packages/**/src --fix"
  </div>
  <h6>
    📝. Knowledge base
  </h6>
  <div>
    ﹘Coming soon...
  </div>
  <h5>
    📄. Sass
  </h5>
  <h6>
    📝. Setup file(s)
  </h6>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.stylelintrc"
    >
      .stylelintrc
    </a>
  </div>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.stylelintignore"
    >
      .stylelintignore
    </a>
  </div>
  <h6>
    📝. Scripts
  </h6>
  <div>
    ﹘ "lint:format": "npm-run-all lint format"
  </div>
  <div>
    ﹘ "lint": "npm-run-all lint:js:jsx lint:scss"
  </div>
  <div>
    ﹘ "lint:scss": "stylelint \\"packages/**/src/**/*.
    {
    (css, scss)
    }
    \\" --syntax=scss --fix"
  </div>
  <h6>
    📝. Knowledge base
  </h6>
  <div>
    ﹘Coming soon...
  </div>
  <h4>
    📃. Code Formatting
  </h4>
  <h5>
    📄. HTML, JavaScript and Sass
  </h5>
  <h6>
    📝. Setup file(s)
  </h6>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.prettierrc"
    >
      .prettierrc
    </a>
  </div>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.prettierignore"
    >
      .prettierignore
    </a>
  </div>
  <h6>
    📝. Script(s)
  </h6>
  <div>
    ﹘"format": "npm-run-all format:js:jsx format:scss"
  </div>
  <div>
    ﹘"format:js:jsx": "prettier --write \\"packages/**/src/**/*.
    {
    (js, jsx)
    }
    \\""
  </div>
  <div>
    ﹘"format:scss": "prettier --write \\"packages/**/src/**/*.
    {
    (css, scss)
    }
    \\""
  </div>
  <h6>
    📝. Knowledge base
  </h6>
  <div>
    ﹘Coming soon...
  </div>
  <h4>
    📃. File Formatting
  </h4>
  <h5>
    📄. Any file type
  </h5>
  <h6>
    📝. Setup file(s)
  </h6>
  <div>
    ﹘
    <a
      href="https://github.com/papillonads/marketplace/blob/master/.editorconfig"
    >
      .editorconfig
    </a>
  </div>
  <h6>
    📝. Script(s)
  </h6>
  <div>
    ﹘N/A
  </div>
  <h6>
    📝. Knowledge base
  </h6>
  <div>
    ﹘Coming soon...
  </div>
</div>
`;

exports[`<CodeStyle /> Render must match specificationsStandardsGuidelines() 1`] = `
<div
  className={null}
>
  <h2>
    📗 Specifications/Standards/Guidelines
  </h2>
  <h3>
    📖. Code Linting
  </h3>
  <h4>
    📃. JavaScript
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/airbnb/javascript"
    >
      AirBnb JavaScript Style Guide
    </a>
  </h5>
  <div>
    ﹘A mostly reasonable approach to JavaScript
  </div>
  <div>
    ﹘Note: this guide assumes you are using Babel, and requires that you use babel-preset-airbnb or the equivalent. It also assumes you are installing shims/polyfills in your app, with airbnb-browser-shims or the equivalent.
  </div>
  <h5>
    📄. 
    <a
      href="https://github.com/airbnb/javascript/tree/master/react"
    >
      Airbnb React/JSX Style Guide
    </a>
  </h5>
  <div>
    ﹘A mostly reasonable approach to React and JSX
  </div>
  <div>
    ﹘This style guide is mostly based on the standards that are currently prevalent in JavaScript, although some conventions (i.e async/await or static class fields) may still be included or prohibited on a case-by-case basis. Currently, anything prior to stage 3 is not included nor recommended in this guide.
  </div>
  <h4>
    📃. Sass
  </h4>
  <h5>
    📄. 
    <a
      href="https://github.com/airbnb/css"
    >
      Airbnb CSS / Sass Styleguide
    </a>
  </h5>
  <div>
    ﹘A mostly reasonable approach to CSS and Sass
  </div>
  <h3>
    📖. Code Formatting
  </h3>
  <h4>
    📃. HTML, JavaScript and Sass
  </h4>
  Coming soon...
  <h3>
    📖. File Formatting
  </h3>
  <h4>
    📃. Any file type
  </h4>
  Coming soon...
</div>
`;
