// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContinuousIntegration /> Render must match designSystemCore() 1`] = `
<div
  className={null}
>
  <h2>
    ðŸ“— Papillon Ads Implementation
  </h2>
  <h3>
    ðŸ“–. Design System Core
  </h3>
  <h4>
    ðŸ“ƒ. Setup file(s)
  </h4>
  <div>
    ï¹˜ Coming soon.
  </div>
  <h4>
    ðŸ“ƒ. Knowledge base
  </h4>
  <div>
    ï¹˜ Coming soon.
  </div>
</div>
`;

exports[`<ContinuousIntegration /> Render must match openSourceDependencyProjects() 1`] = `
<div
  className={null}
>
  <h2>
    ðŸ“— Open Source Dependency Projects
  </h2>
  <h3>
    ðŸ“–. CircleCI
  </h3>
  <h4>
    <a
      href="https://github.com/circleci"
    >
      ðŸ“ƒ. Continuous Integration and Deployment
    </a>
  </h4>
  <div>
    ï¹˜ 
    <a
      href="https://github.com/circleci/circleci-doc"
    >
      Documentation
    </a>
     for CircleCI
  </div>
  <div>
    ï¹˜ 
    <a
      href="https://github.com/circleci/enterprise-setup"
    >
      Installation resources
    </a>
     for CircleCI Enterprise
  </div>
</div>
`;

exports[`<ContinuousIntegration /> Render must match productMicrosites() 1`] = `
<div
  className={null}
>
  <h2>
    ðŸ“— Papillon Ads Implementation
  </h2>
  <h3>
    ðŸ“–. Product Microsites
  </h3>
  <h4>
    ðŸ“ƒ. Setup file(s)
  </h4>
  <div>
    ï¹˜ Coming soon.
  </div>
  <h4>
    ðŸ“ƒ. Knowledge base
  </h4>
  <div>
    ï¹˜ Coming soon.
  </div>
</div>
`;

exports[`<ContinuousIntegration /> Render must match specificationsStandardsGuidelines() 1`] = `
<div
  className={null}
>
  <h2>
    ðŸ“— Specifications/Standards/Guidelines
  </h2>
  <h3>
    ðŸ“–. Service
  </h3>
  <h4>
    ðŸ“ƒ. CircleCI
  </h4>
  <h5>
    ðŸ“„. 
    <a
      href="https://circleci.com/docs/"
    >
      CircleCI Documentation
    </a>
  </h5>
  <div>
    ï¹˜ Use the tutorials, samples, how-to, and reference documentation to learn CircleCI
  </div>
  <h5>
    ðŸ“„. 
    <a
      href="https://circleci.com/docs/2.0/pipelines/"
    >
      CircleCI Pipelines
    </a>
  </h5>
  <div>
    ï¹˜ 
    <strong>
      Viewing Pipelines
    </strong>
     This document provides a summary of the Pipelines page in the CircleCI app and documents some of the changes to the CircleCI user interface.
  </div>
  <h3>
    ðŸ“–. Branching Model
  </h3>
  <h4>
    ðŸ“ƒ. Git Flow
  </h4>
  <h5>
    ðŸ“„. 
    <a
      href="https://blog.axosoft.com/gitflow/"
    >
      Axasoft Documentation
    </a>
  </h5>
  <div>
    ï¹˜ Gitflow utilizes the core feature of Git, which is the power of branches. In this model, a repository has two main branches:
  </div>
  <div>
    ï¹˜ 
    <strong>
      Master
    </strong>
     This is a highly stable branch that is always production-ready and contains the last release version of source code in production.
  </div>
  <div>
    ï¹˜ 
    <strong>
      Develop
    </strong>
     Derived from the master branch, the development branch serves as a branch for integrating different features planned for an upcoming release. This branch may or may not be as stable as the master branch. It is where developers collaborate and merge feature branches.
  </div>
  <h5>
    ðŸ“„. 
    <a
      href="https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow"
    >
      Atlassian Documentation
    </a>
  </h5>
  <div>
    ï¹˜ Gitflow Workflow is a Git workflow design that was first published and made popular by Vincent Driessen at nvie. The Gitflow Workflow defines a strict branching model designed around the project release. This provides a robust framework for managing larger projects.
  </div>
  <div>
    ï¹˜ Gitflow is ideally suited for projects that have a scheduled release cycle. This workflow doesnâ€™t add any new concepts or commands beyond whatâ€™s required for the Feature Branch Workflow. Instead, it assigns very specific roles to different branches and defines how and when they should interact. In addition to feature branches, it uses individual branches for preparing, maintaining, and recording releases. Of course, you also get to leverage all the benefits of the Feature Branch Workflow: pull requests, isolated experiments, and more efficient collaboration.
  </div>
  <h5>
    ðŸ“„. 
    <a
      href="https://nvie.com/posts/a-successful-git-branching-model/"
    >
      A successful Git branching model
    </a>
  </h5>
  <div>
    ï¹˜ This model was conceived in 2010, now more than 10 years ago, and not very long after Git itself came into being. In those 10 years, git-flow (the branching model laid out in this article) has become hugely popular in many a software team to the point where people have started treating it like a standard of sorts â€” but unfortunately also as a dogma or panacea.
  </div>
</div>
`;
